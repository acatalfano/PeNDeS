/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sat Apr 24 2021 09:43:21 GMT-0400 (Eastern Daylight Time).
 */

//TODO: cleanup console.log's and this._logger.[debug|info|...]'s

define(['jointjs', 'lodash', 'css!./styles/SimPetriNetFiringWidget.css'], function (joint, _) {
    'use strict';

    var WIDGET_CLASS = 'sim-petri-net-firing';

    function SimPetriNetFiringWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    SimPetriNetFiringWidget.prototype._initialize = function () {
        console.log(joint);

        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header
        //this._el.append('<h3>SimPetriNetFiring Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        //this._el.on('dblclick', function (event) {
        //     event.stopPropagation();
        //     event.preventDefault();
        //     self.onBackgroundDblClick();
        //});

        this._jointPN = new joint.dia.Graph();
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width,
            height,
            model: this._jointPN,
            interactive: false,
        });

        this._jointPaper.on('element:pointerdblclick', (view) => {
            const el = elementView.model;
            console.log(el);
            if (_isNil(self._webgmePN)) {
                console.log(self._webgmePN.id2node[el.id]);
                self._setCurrentState(self._webgmePN.id2node[el.id]);
            }
        });

        this._webgmePN = null;
    };

    SimPetriNetFiringWidget.prototype.fireEvent = function (event) {
        const self = this;
        const curr = self._webgmePN.nodes[self._webgmePN.current];
        const link = curr.jointNext[event];
        const linkView = link.findView(self._jointPaper);
        linkView.sendToken(joint.V('circle', { r: 10, fill: 'black' }), { duration: 5 }, () => {
            self._webgmePN.current = current.next[event];
            self._decoratePN();
        });
    };

    SimPetriNetFiringWidget.prototype.destroyPN = function () {
        //TODO:
    };

    SimPetriNetFiringWidget.prototype._decoratePN = function () {
        const pn = this._webgmePN;
        Object.keys(pn.nodes).forEach((id) => pn.nodes[id].joint.attr('body/stroke', '#333333'));

        pn.nodes[pn.current].joint.attr('body/stroke', 'blue');
        pn.setFireableEvents(Object.keys(pn.nodes[pn.current].next));
    };

    SimPetriNetFiringWidget.prototype._setCurrentState = function (next) {
        this._webgmePN.current = next;
        this._decoratePN();
    };

    SimPetriNetFiringWidget.prototype.initPN = function (pnDescription) {
        const self = this;
        console.log(pnDescription);

        self._webgmePN = pnDescription;
        self._webgmePN.current = self._webgmePN.init;
        self._jointPN.clear();
        const pn = self._webgmePN;
        pn.id2node = {};

        Objects.keys(pn.nodes).forEach((id) => {
            let vertex = null;
            if (pn.init === id) {
                vertex = new joint.shapes.standard.Circle({
                    position: pn.nodes[id].position,
                    size: { width: 20, height: 20 },
                    attrs: {
                        body: {
                            fill: '#333333',
                            cursor: 'pointer',
                        },
                    },
                });
            } else if (pn.states[id].isEnd) {
                vertex = new joint.shapes.standard.Circle({
                    position: pn.nodes[id].position,
                    size: { width: 30, height: 30 },
                    attrs: {
                        body: {
                            fill: '#999999',
                            cursor: 'pointer',
                        },
                    },
                });
            } else {
                vertex = new joint.shapes.standard.Circle({
                    position: pn.nodes[id].position,
                    size: { width: 60, height: 60 },
                    attrs: {
                        label: {
                            text: pn.nodes[id].name,
                            //event: 'element:label:pointerdown',
                            fontWeight: 'bold',
                            //cursor: 'text',
                            //style: {
                            //  userSelect: 'text'
                            //}
                        },
                        body: {
                            strokeWidth: 3,
                            cursor: 'pointer',
                        },
                    },
                });

                vertex.addTo(self._jointPN);

                // reference in-model id to jointjs graphical-id (for manipulating based on model data)
                pn.nodes[id].joint = vertex;

                // reference jointjs graphical-id to in-model id (to know what model-element is clicked on --> user interactions)
                pn.id2node[vertex.id] = id;
            }
        });

        Object.keys(pn.nodes).forEach((id) => {
            const node = pn.nodes[id];
            Object.keys(node.next).forEach((event) => {
                node.jointNext = node.jointNext ?? {};
                const link = new joint.shapes.standard.Link({
                    source: { id: node.joint.id },
                    target: { id: pn.nodes[node.next[event]].joint.id },
                    attrs: {
                        line: {
                            strokeWidth: 2,
                        },
                        wrapper: {
                            cursor: 'default',
                        },
                    },
                    labels: [
                        {
                            position: {
                                distance: 0.5,
                                offset: 0,
                                args: {
                                    keepGradient: true,
                                    ensureLegibility: true,
                                },
                            },
                            attrs: {
                                text: {
                                    text: event,
                                    fontWeight: 'bold',
                                },
                            },
                        },
                    ],
                });
                link.addTo(self._jointPN);
                node.jointNext[event] = link;
            });
        });

        //now refresh the visualization
        self._jointPaper.updateViews();
        self._decoratePN();
    };

    SimPetriNetFiringWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    SimPetriNetFiringWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML =
                'Adding node "' +
                desc.name +
                '" (click to view). It has ' +
                desc.childrenIds.length +
                ' ' +
                label +
                '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    SimPetriNetFiringWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    SimPetriNetFiringWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    SimPetriNetFiringWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    SimPetriNetFiringWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimPetriNetFiringWidget.prototype.destroy = function () {};

    SimPetriNetFiringWidget.prototype.onActivate = function () {
        this._logger.debug('SimPetriNetFiringWidget has been activated');
    };

    SimPetriNetFiringWidget.prototype.onDeactivate = function () {
        this._logger.debug('SimPetriNetFiringWidget has been deactivated');
    };

    return SimPetriNetFiringWidget;
});
