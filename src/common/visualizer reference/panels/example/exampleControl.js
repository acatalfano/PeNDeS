/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sat Apr 24 2021 09:43:21 GMT-0400 (Eastern Daylight Time).
 */

define(['js/Constants', 'js/Utils/GMEConcepts', 'js/NodePropertyNames'], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {
    'use strict';

    function SimPetriNetFiringControl(options) {
        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        //this._currentNodeParentId = undefined;

        //added this:
        this._networkRootLoaded = false;
        //added this:
        this._fireableEvents = null;

        this._initWidgetEventHandlers();

        //added this:
        // we need to fix the context of this function as it will be called from the widget
        this.setFireableEvents = this.setFireableEvents.bind(this);

        this._logger.debug('ctor finished');
    }

    SimPetriNetFiringControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    SimPetriNetFiringControl.prototype.selectedObjectChanged = function (nodeId) {
        var //desc = this._getObjectDescriptor(nodeId),
            self = this;

        //self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);

            //added this:
            self._networkRootLoaded = false;
        }

        self._currentNodeId = nodeId;
        //self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // the pattern only has "children" as a property (or nothing)
            //      children # is the depth/distance from the center of the pattern
            //      we're interested in (i.e. center of the territory)

            // i.e. saying self._selfPatterns[nodeId] = {children: 1} means
            //      i'm not just interested in the node w/ id "nodeId"
            //      but also it's direct children (b/c "children: 1")
            //  *** children referring to composition-children (in the model)

            // Put new node's info into territory rules
            self._selfPatterns = {};
            //self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"
            // replaced with this: (which appears near the bottom anyways...)
            // (prob better how it was b/c it's set to 0 if error happens, and 1 if successful)
            self._selfPatterns[nodeId] = { children: 1 };

            //self._widget.setTitle(desc.name.toUpperCase());

            // if (typeof desc.parentId === 'string') {
            //     self.$btnModelHierarchyUp.show();
            // } else {
            //     self.$btnModelHierarchyUp.hide();
            // }

            // self._currentNodeParentId = desc.parentId;

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);

            //self._selfPatterns[nodeId] = {children: 1};
            //self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    // SimPetriNetFiringControl.prototype._getObjectDescriptor = function (nodeId) {
    //     var node = this._client.getNode(nodeId),
    //         objDescriptor;
    //     if (node) {
    //         objDescriptor = {
    //             id: node.getId(),
    //             name: node.getAttribute(nodePropertyNames.Attributes.name),
    //             childrenIds: node.getChildrenIds(),
    //             parentId: node.getParentId(),
    //             isConnection: GMEConcepts.isConnection(nodeId)
    //         };
    //     }

    //     return objDescriptor;
    // };

    /* * * * * * * * Node Event Handling * * * * * * * */
    SimPetriNetFiringControl.prototype._eventCallback = function (events) {
        // var i = events ? events.length : 0,
        //     event;

        // this._logger.debug('_eventCallback \'' + i + '\' items');

        // while (i--) {
        //     event = events[i];
        //     switch (event.etype) {

        //     case CONSTANTS.TERRITORY_EVENT_LOAD:
        //         this._onLoad(event.eid);
        //         break;
        //     case CONSTANTS.TERRITORY_EVENT_UPDATE:
        //         this._onUpdate(event.eid);
        //         break;
        //     case CONSTANTS.TERRITORY_EVENT_UNLOAD:
        //         this._onUnload(event.eid);
        //         break;
        //     default:
        //         break;
        //     }
        // }

        // this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');

        const self = this;
        console.log(events);
        events.forEach((event) => {
            // if event came from the petri-net
            if (event.eid && event.eid === self._currentNodeId) {
                if (event.etype == CONSTANTS.TERRITORY_EVENT_LOAD || event.etype == CONSTANTS.TERRITORY_EVENT_UPDATE) {
                    self._networkRootLoaded = true;
                } else {
                    // not a load or update event ==> unload event
                    self.clearPN();
                    return;
                }
            }
        });

        if (events.length && events[0].etype === 'complete' && self._networkRootLoaded) {
            // complete means we got all requested data and we do not have to wait
            self._initPN();
        }
    };

    // SimPetriNetFiringControl.prototype._onLoad = function (gmeId) {
    //     var description = this._getObjectDescriptor(gmeId);
    //     this._widget.addNode(description);
    // };

    // SimPetriNetFiringControl.prototype._onUpdate = function (gmeId) {
    //     var description = this._getObjectDescriptor(gmeId);
    //     this._widget.updateNode(description);
    // };

    // SimPetriNetFiringControl.prototype._onUnload = function (gmeId) {
    //     this._widget.removeNode(gmeId);
    // };

    SimPetriNetFiringControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    SimPetriNetFiringControl.prototype._initPN = function () {
        //N.B. we don't have the core api, but the client api (very similar)

        const self = this;
        //just for the ease of use, let's create a META dictionary
        // const rawMETA = self._client.getAllMetaNodes();
        // const META = {};
        // rawMETA.forEach(node => {
        //     META[node.getAttribute('name')] = node.getId();
        // });

        const META = self._client
            .getAllMetaNodes()
            .reduce((accum, node) => ({ ...accum, [node.getAttribute('name')]: node.getId() }), {});

        //now we collect all data we need for network visualization
        //we need our states (names, position, type), need the set of next state (....)
        const smNode = self._client.getNode(self._currentNodeId);
        const elementIds = smNode.getChildrenIds();
        const sm = { init: null, states: {} };
        elementIds.forEach((elementId) => {
            const node = self._client.getNode(elementId);
            // the simple way of checking type
            if (node.isTypeOf(META['STATE'])) {
                //right now we're only in states...
                const state = { name: node.getAttribute('name'), next: {}, position: node.getAttribute('position') };
                if ('Init' === self._client.getNode(node.getMetaTypeId()).getAttribute('type...?')) {
                    sm.init = elementId;
                }

                // this is in no way optimal, but shows clearly what we are looking for
                elementIds.forEach((nextId) => {
                    const nextNode = self._client.getNode(nextId);
                    if (nextNode.isTypeOf(META['Transition']) && nextNode.getPointer('.....')) {
                        state.next[nextNode.getAttribute('event')] = nextNode.getPointer('.....');
                    }
                });
                sm.states[elementId] = state;
            }
        });
        sm.setFireableEvents = this.setFireableEvents;

        self._widget.initPN(sm);
    };

    SimPetriNetFiringControl.prototype.clearPN = function () {
        const self = this;
        self._networkRootLoaded = false;
        self._widget.destroyPN();
    };

    SimPetriNetFiringControl.prototype.setFireableEvents = function (events) {
        this._fireableEvents = events;
        if (events && events.length > 1) {
            // we need to fill the dropdown button with options
            this.$btnEventSelector.clear();
            events.forEach((event) => {
                this.$btnEventSelector.addButton({
                    text: event,
                    title: 'fire event: ' + event,
                    data: { event },
                    clickFn: (data) => {
                        this._widget.fireEvent(data.event);
                    },
                });
            });
        } else if (events && events.length === 0) {
            this._fireableEvents = null;
        }

        this._displayToolbarItems();
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimPetriNetFiringControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    SimPetriNetFiringControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    SimPetriNetFiringControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    SimPetriNetFiringControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, { suppressVisualizerFromNode: true });
        }
    };

    SimPetriNetFiringControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    SimPetriNetFiringControl.prototype._displayToolbarItems = function () {
        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--; ) {
                this._toolbarItems[i].show();
            }
            //added this if/else-if/else:
            if (this._fireableEvents === null) {
                this.$btnEventSelector.hide();
                this.$btnSingleEvent.hide();
            } else if (this._fireableEvents.length === 1) {
                this.$btnEventSelector.hide();
            } else {
                this.$btnSingleEvent.hide();
            }
        } else {
            this._initializeToolbar();
        }
    };

    SimPetriNetFiringControl.prototype._hideToolbarItems = function () {
        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--; ) {
                this._toolbarItems[i].hide();
            }
        }
    };

    SimPetriNetFiringControl.prototype._removeToolbarItems = function () {
        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--; ) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    SimPetriNetFiringControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        // this.$btnModelHierarchyUp = toolBar.addButton({
        //     title: 'Go to parent',
        //     icon: 'glyphicon glyphicon-circle-arrow-up',
        //     clickFn: function (/*data*/) {
        //         WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
        //     }
        // });
        // this._toolbarItems.push(this.$btnModelHierarchyUp);
        // this.$btnModelHierarchyUp.hide();

        // /************** Checkbox example *******************/

        // this.$cbShowConnection = toolBar.addCheckBox({
        //     title: 'toggle checkbox',
        //     icon: 'gme icon-gme_diagonal-arrow',
        //     checkChangedFn: function (data, checked) {
        //         self._logger.debug('Checkbox has been clicked!');
        //     }
        // });
        // this._toolbarItems.push(this.$cbShowConnection);

        //#region added content:
        this.$btnReachCheck = toolbar.addButton({
            title: 'Check state machine reachability properties',
            icon: 'glyphicon glyphicon-question-sign',
            clickFn: function (/*data*/) {
                //                                      (pluginId, nodeId, selectedNodeIds)
                const context = self._client.getCurrentPluginContext('ReachCheck', self._currentNodeId, []);
                // !!! it is important to fill out or pass an empty object as the pluginConfig
                context.pluginConfig = {};
                // if plugin written in JS, you can optionally run it on the client-side
                // (via self._client.runClientPlugin() )
                self._client.runServerPlugin('ReachCheck', context, function (err, result) {
                    // here comes any additional processing of results or potential errors
                    console.log('plugin err:', err);
                    console.log('plugin result:', result);
                });
            },
        });
        this._toolbarItems.push(this.$btnReachCheck);

        this.$btnResetMachine = toolBar.addButton({
            title: 'Reset simulator',
            icon: 'glyphicon glyphicon-fast-backward',
            clickFn: function (/*data*/) {
                self._widget.resetPN();
            },
        });
        this._toolbarItems.push(this.$btnResetMachine);

        // when there are multiple events to choose from we offer a selector
        this.$btnEventSelector = toolBar.addDropDownButton({
            text: 'event',
        });
        this._toolbarItems.push(this.$btnEventSelector);
        this.$btnEventSelector.hide();

        // if there is only one event we just show a play button
        this.$btnSingleEvent = toolBar.addButton({
            title: 'Fire event',
            icon: 'glyphicon glyphicon-play',
            clickFn: function (/*data*/) {
                self._widget.fireEvent(self._fireableEvents[0]);
            },
        });
        this._toolbarItems.push(this.$btnSingleEvent);
        //#endregion

        this._toolbarInitialized = true;
    };

    return SimPetriNetFiringControl;
});
